using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Public
{
	/// <summary>
	/// Strongly-typed collection for the KetQuaTuyenSinh class.
	/// </summary>
    [Serializable]
	public partial class KetQuaTuyenSinhCollection : ActiveList<KetQuaTuyenSinh, KetQuaTuyenSinhCollection>
	{	   
		public KetQuaTuyenSinhCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>KetQuaTuyenSinhCollection</returns>
		public KetQuaTuyenSinhCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                KetQuaTuyenSinh o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the KetQuaTuyenSinh table.
	/// </summary>
	[Serializable]
	public partial class KetQuaTuyenSinh : ActiveRecord<KetQuaTuyenSinh>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public KetQuaTuyenSinh()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public KetQuaTuyenSinh(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public KetQuaTuyenSinh(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public KetQuaTuyenSinh(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("KetQuaTuyenSinh", TableType.Table, DataService.GetInstance("QLSUN"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Guid;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				
						colvarId.DefaultSetting = @"(newid())";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarIdDotTuyenSinh = new TableSchema.TableColumn(schema);
				colvarIdDotTuyenSinh.ColumnName = "IdDotTuyenSinh";
				colvarIdDotTuyenSinh.DataType = DbType.Guid;
				colvarIdDotTuyenSinh.MaxLength = 0;
				colvarIdDotTuyenSinh.AutoIncrement = false;
				colvarIdDotTuyenSinh.IsNullable = false;
				colvarIdDotTuyenSinh.IsPrimaryKey = false;
				colvarIdDotTuyenSinh.IsForeignKey = true;
				colvarIdDotTuyenSinh.IsReadOnly = false;
				colvarIdDotTuyenSinh.DefaultSetting = @"";
				
					colvarIdDotTuyenSinh.ForeignKeyTableName = "DotTuyenSinh";
				schema.Columns.Add(colvarIdDotTuyenSinh);
				
				TableSchema.TableColumn colvarIdHocVien = new TableSchema.TableColumn(schema);
				colvarIdHocVien.ColumnName = "IdHocVien";
				colvarIdHocVien.DataType = DbType.Guid;
				colvarIdHocVien.MaxLength = 0;
				colvarIdHocVien.AutoIncrement = false;
				colvarIdHocVien.IsNullable = false;
				colvarIdHocVien.IsPrimaryKey = false;
				colvarIdHocVien.IsForeignKey = true;
				colvarIdHocVien.IsReadOnly = false;
				colvarIdHocVien.DefaultSetting = @"";
				
					colvarIdHocVien.ForeignKeyTableName = "HocVien";
				schema.Columns.Add(colvarIdHocVien);
				
				TableSchema.TableColumn colvarDiemNghe = new TableSchema.TableColumn(schema);
				colvarDiemNghe.ColumnName = "DiemNghe";
				colvarDiemNghe.DataType = DbType.String;
				colvarDiemNghe.MaxLength = 5;
				colvarDiemNghe.AutoIncrement = false;
				colvarDiemNghe.IsNullable = true;
				colvarDiemNghe.IsPrimaryKey = false;
				colvarDiemNghe.IsForeignKey = false;
				colvarDiemNghe.IsReadOnly = false;
				colvarDiemNghe.DefaultSetting = @"";
				colvarDiemNghe.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiemNghe);
				
				TableSchema.TableColumn colvarDiemNoi = new TableSchema.TableColumn(schema);
				colvarDiemNoi.ColumnName = "DiemNoi";
				colvarDiemNoi.DataType = DbType.String;
				colvarDiemNoi.MaxLength = 5;
				colvarDiemNoi.AutoIncrement = false;
				colvarDiemNoi.IsNullable = true;
				colvarDiemNoi.IsPrimaryKey = false;
				colvarDiemNoi.IsForeignKey = false;
				colvarDiemNoi.IsReadOnly = false;
				colvarDiemNoi.DefaultSetting = @"";
				colvarDiemNoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiemNoi);
				
				TableSchema.TableColumn colvarDiemDoc = new TableSchema.TableColumn(schema);
				colvarDiemDoc.ColumnName = "DiemDoc";
				colvarDiemDoc.DataType = DbType.String;
				colvarDiemDoc.MaxLength = 5;
				colvarDiemDoc.AutoIncrement = false;
				colvarDiemDoc.IsNullable = true;
				colvarDiemDoc.IsPrimaryKey = false;
				colvarDiemDoc.IsForeignKey = false;
				colvarDiemDoc.IsReadOnly = false;
				colvarDiemDoc.DefaultSetting = @"";
				colvarDiemDoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiemDoc);
				
				TableSchema.TableColumn colvarDiemViet = new TableSchema.TableColumn(schema);
				colvarDiemViet.ColumnName = "DiemViet";
				colvarDiemViet.DataType = DbType.String;
				colvarDiemViet.MaxLength = 5;
				colvarDiemViet.AutoIncrement = false;
				colvarDiemViet.IsNullable = true;
				colvarDiemViet.IsPrimaryKey = false;
				colvarDiemViet.IsForeignKey = false;
				colvarDiemViet.IsReadOnly = false;
				colvarDiemViet.DefaultSetting = @"";
				colvarDiemViet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiemViet);
				
				TableSchema.TableColumn colvarGhiChu = new TableSchema.TableColumn(schema);
				colvarGhiChu.ColumnName = "GhiChu";
				colvarGhiChu.DataType = DbType.String;
				colvarGhiChu.MaxLength = 1073741823;
				colvarGhiChu.AutoIncrement = false;
				colvarGhiChu.IsNullable = true;
				colvarGhiChu.IsPrimaryKey = false;
				colvarGhiChu.IsForeignKey = false;
				colvarGhiChu.IsReadOnly = false;
				colvarGhiChu.DefaultSetting = @"";
				colvarGhiChu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGhiChu);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["QLSUN"].AddSchema("KetQuaTuyenSinh",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public Guid Id 
		{
			get { return GetColumnValue<Guid>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("IdDotTuyenSinh")]
		[Bindable(true)]
		public Guid IdDotTuyenSinh 
		{
			get { return GetColumnValue<Guid>(Columns.IdDotTuyenSinh); }
			set { SetColumnValue(Columns.IdDotTuyenSinh, value); }
		}
		  
		[XmlAttribute("IdHocVien")]
		[Bindable(true)]
		public Guid IdHocVien 
		{
			get { return GetColumnValue<Guid>(Columns.IdHocVien); }
			set { SetColumnValue(Columns.IdHocVien, value); }
		}
		  
		[XmlAttribute("DiemNghe")]
		[Bindable(true)]
		public string DiemNghe 
		{
			get { return GetColumnValue<string>(Columns.DiemNghe); }
			set { SetColumnValue(Columns.DiemNghe, value); }
		}
		  
		[XmlAttribute("DiemNoi")]
		[Bindable(true)]
		public string DiemNoi 
		{
			get { return GetColumnValue<string>(Columns.DiemNoi); }
			set { SetColumnValue(Columns.DiemNoi, value); }
		}
		  
		[XmlAttribute("DiemDoc")]
		[Bindable(true)]
		public string DiemDoc 
		{
			get { return GetColumnValue<string>(Columns.DiemDoc); }
			set { SetColumnValue(Columns.DiemDoc, value); }
		}
		  
		[XmlAttribute("DiemViet")]
		[Bindable(true)]
		public string DiemViet 
		{
			get { return GetColumnValue<string>(Columns.DiemViet); }
			set { SetColumnValue(Columns.DiemViet, value); }
		}
		  
		[XmlAttribute("GhiChu")]
		[Bindable(true)]
		public string GhiChu 
		{
			get { return GetColumnValue<string>(Columns.GhiChu); }
			set { SetColumnValue(Columns.GhiChu, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a DotTuyenSinh ActiveRecord object related to this KetQuaTuyenSinh
		/// 
		/// </summary>
		public Public.DotTuyenSinh DotTuyenSinh
		{
			get { return Public.DotTuyenSinh.FetchByID(this.IdDotTuyenSinh); }
			set { SetColumnValue("IdDotTuyenSinh", value.IdDotTuyenSinh); }
		}
		
		
		/// <summary>
		/// Returns a HocVien ActiveRecord object related to this KetQuaTuyenSinh
		/// 
		/// </summary>
		public Public.HocVien HocVien
		{
			get { return Public.HocVien.FetchByID(this.IdHocVien); }
			set { SetColumnValue("IdHocVien", value.IdHocVien); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid varId,Guid varIdDotTuyenSinh,Guid varIdHocVien,string varDiemNghe,string varDiemNoi,string varDiemDoc,string varDiemViet,string varGhiChu)
		{
			KetQuaTuyenSinh item = new KetQuaTuyenSinh();
			
			item.Id = varId;
			
			item.IdDotTuyenSinh = varIdDotTuyenSinh;
			
			item.IdHocVien = varIdHocVien;
			
			item.DiemNghe = varDiemNghe;
			
			item.DiemNoi = varDiemNoi;
			
			item.DiemDoc = varDiemDoc;
			
			item.DiemViet = varDiemViet;
			
			item.GhiChu = varGhiChu;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(Guid varId,Guid varIdDotTuyenSinh,Guid varIdHocVien,string varDiemNghe,string varDiemNoi,string varDiemDoc,string varDiemViet,string varGhiChu)
		{
			KetQuaTuyenSinh item = new KetQuaTuyenSinh();
			
				item.Id = varId;
			
				item.IdDotTuyenSinh = varIdDotTuyenSinh;
			
				item.IdHocVien = varIdHocVien;
			
				item.DiemNghe = varDiemNghe;
			
				item.DiemNoi = varDiemNoi;
			
				item.DiemDoc = varDiemDoc;
			
				item.DiemViet = varDiemViet;
			
				item.GhiChu = varGhiChu;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdDotTuyenSinhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdHocVienColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DiemNgheColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DiemNoiColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DiemDocColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DiemVietColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn GhiChuColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string IdDotTuyenSinh = @"IdDotTuyenSinh";
			 public static string IdHocVien = @"IdHocVien";
			 public static string DiemNghe = @"DiemNghe";
			 public static string DiemNoi = @"DiemNoi";
			 public static string DiemDoc = @"DiemDoc";
			 public static string DiemViet = @"DiemViet";
			 public static string GhiChu = @"GhiChu";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
