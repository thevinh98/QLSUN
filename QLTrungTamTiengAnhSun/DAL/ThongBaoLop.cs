using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Public
{
	/// <summary>
	/// Strongly-typed collection for the ThongBaoLop class.
	/// </summary>
    [Serializable]
	public partial class ThongBaoLopCollection : ActiveList<ThongBaoLop, ThongBaoLopCollection>
	{	   
		public ThongBaoLopCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ThongBaoLopCollection</returns>
		public ThongBaoLopCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ThongBaoLop o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ThongBaoLop table.
	/// </summary>
	[Serializable]
	public partial class ThongBaoLop : ActiveRecord<ThongBaoLop>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ThongBaoLop()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ThongBaoLop(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ThongBaoLop(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ThongBaoLop(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ThongBaoLop", TableType.Table, DataService.GetInstance("QLSUN"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Guid;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				
						colvarId.DefaultSetting = @"(newid())";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarIdLop = new TableSchema.TableColumn(schema);
				colvarIdLop.ColumnName = "IdLop";
				colvarIdLop.DataType = DbType.Guid;
				colvarIdLop.MaxLength = 0;
				colvarIdLop.AutoIncrement = false;
				colvarIdLop.IsNullable = false;
				colvarIdLop.IsPrimaryKey = false;
				colvarIdLop.IsForeignKey = true;
				colvarIdLop.IsReadOnly = false;
				colvarIdLop.DefaultSetting = @"";
				
					colvarIdLop.ForeignKeyTableName = "Lop";
				schema.Columns.Add(colvarIdLop);
				
				TableSchema.TableColumn colvarTieuDe = new TableSchema.TableColumn(schema);
				colvarTieuDe.ColumnName = "TieuDe";
				colvarTieuDe.DataType = DbType.String;
				colvarTieuDe.MaxLength = 100;
				colvarTieuDe.AutoIncrement = false;
				colvarTieuDe.IsNullable = true;
				colvarTieuDe.IsPrimaryKey = false;
				colvarTieuDe.IsForeignKey = false;
				colvarTieuDe.IsReadOnly = false;
				colvarTieuDe.DefaultSetting = @"";
				colvarTieuDe.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTieuDe);
				
				TableSchema.TableColumn colvarNoiDung = new TableSchema.TableColumn(schema);
				colvarNoiDung.ColumnName = "NoiDung";
				colvarNoiDung.DataType = DbType.String;
				colvarNoiDung.MaxLength = 1073741823;
				colvarNoiDung.AutoIncrement = false;
				colvarNoiDung.IsNullable = true;
				colvarNoiDung.IsPrimaryKey = false;
				colvarNoiDung.IsForeignKey = false;
				colvarNoiDung.IsReadOnly = false;
				colvarNoiDung.DefaultSetting = @"";
				colvarNoiDung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoiDung);
				
				TableSchema.TableColumn colvarThoiGian = new TableSchema.TableColumn(schema);
				colvarThoiGian.ColumnName = "ThoiGian";
				colvarThoiGian.DataType = DbType.DateTime;
				colvarThoiGian.MaxLength = 0;
				colvarThoiGian.AutoIncrement = false;
				colvarThoiGian.IsNullable = false;
				colvarThoiGian.IsPrimaryKey = false;
				colvarThoiGian.IsForeignKey = false;
				colvarThoiGian.IsReadOnly = false;
				colvarThoiGian.DefaultSetting = @"";
				colvarThoiGian.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThoiGian);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "TrangThai";
				colvarTrangThai.DataType = DbType.String;
				colvarTrangThai.MaxLength = 20;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				colvarTrangThai.DefaultSetting = @"";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["QLSUN"].AddSchema("ThongBaoLop",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public Guid Id 
		{
			get { return GetColumnValue<Guid>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("IdLop")]
		[Bindable(true)]
		public Guid IdLop 
		{
			get { return GetColumnValue<Guid>(Columns.IdLop); }
			set { SetColumnValue(Columns.IdLop, value); }
		}
		  
		[XmlAttribute("TieuDe")]
		[Bindable(true)]
		public string TieuDe 
		{
			get { return GetColumnValue<string>(Columns.TieuDe); }
			set { SetColumnValue(Columns.TieuDe, value); }
		}
		  
		[XmlAttribute("NoiDung")]
		[Bindable(true)]
		public string NoiDung 
		{
			get { return GetColumnValue<string>(Columns.NoiDung); }
			set { SetColumnValue(Columns.NoiDung, value); }
		}
		  
		[XmlAttribute("ThoiGian")]
		[Bindable(true)]
		public DateTime ThoiGian 
		{
			get { return GetColumnValue<DateTime>(Columns.ThoiGian); }
			set { SetColumnValue(Columns.ThoiGian, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public string TrangThai 
		{
			get { return GetColumnValue<string>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a Lop ActiveRecord object related to this ThongBaoLop
		/// 
		/// </summary>
		public Public.Lop Lop
		{
			get { return Public.Lop.FetchByID(this.IdLop); }
			set { SetColumnValue("IdLop", value.IdLop); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid varId,Guid varIdLop,string varTieuDe,string varNoiDung,DateTime varThoiGian,string varTrangThai)
		{
			ThongBaoLop item = new ThongBaoLop();
			
			item.Id = varId;
			
			item.IdLop = varIdLop;
			
			item.TieuDe = varTieuDe;
			
			item.NoiDung = varNoiDung;
			
			item.ThoiGian = varThoiGian;
			
			item.TrangThai = varTrangThai;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(Guid varId,Guid varIdLop,string varTieuDe,string varNoiDung,DateTime varThoiGian,string varTrangThai)
		{
			ThongBaoLop item = new ThongBaoLop();
			
				item.Id = varId;
			
				item.IdLop = varIdLop;
			
				item.TieuDe = varTieuDe;
			
				item.NoiDung = varNoiDung;
			
				item.ThoiGian = varThoiGian;
			
				item.TrangThai = varTrangThai;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdLopColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TieuDeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn NoiDungColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ThoiGianColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string IdLop = @"IdLop";
			 public static string TieuDe = @"TieuDe";
			 public static string NoiDung = @"NoiDung";
			 public static string ThoiGian = @"ThoiGian";
			 public static string TrangThai = @"TrangThai";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
