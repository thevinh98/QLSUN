using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Public
{
	/// <summary>
	/// Strongly-typed collection for the LichGiangDay class.
	/// </summary>
    [Serializable]
	public partial class LichGiangDayCollection : ActiveList<LichGiangDay, LichGiangDayCollection>
	{	   
		public LichGiangDayCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LichGiangDayCollection</returns>
		public LichGiangDayCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LichGiangDay o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the LichGiangDay table.
	/// </summary>
	[Serializable]
	public partial class LichGiangDay : ActiveRecord<LichGiangDay>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LichGiangDay()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LichGiangDay(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LichGiangDay(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LichGiangDay(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("LichGiangDay", TableType.Table, DataService.GetInstance("QLSUN"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdLichGiangDay = new TableSchema.TableColumn(schema);
				colvarIdLichGiangDay.ColumnName = "IdLichGiangDay";
				colvarIdLichGiangDay.DataType = DbType.Guid;
				colvarIdLichGiangDay.MaxLength = 0;
				colvarIdLichGiangDay.AutoIncrement = false;
				colvarIdLichGiangDay.IsNullable = false;
				colvarIdLichGiangDay.IsPrimaryKey = true;
				colvarIdLichGiangDay.IsForeignKey = false;
				colvarIdLichGiangDay.IsReadOnly = false;
				
						colvarIdLichGiangDay.DefaultSetting = @"(newid())";
				colvarIdLichGiangDay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdLichGiangDay);
				
				TableSchema.TableColumn colvarIdLop = new TableSchema.TableColumn(schema);
				colvarIdLop.ColumnName = "IdLop";
				colvarIdLop.DataType = DbType.Guid;
				colvarIdLop.MaxLength = 0;
				colvarIdLop.AutoIncrement = false;
				colvarIdLop.IsNullable = false;
				colvarIdLop.IsPrimaryKey = false;
				colvarIdLop.IsForeignKey = true;
				colvarIdLop.IsReadOnly = false;
				colvarIdLop.DefaultSetting = @"";
				
					colvarIdLop.ForeignKeyTableName = "Lop";
				schema.Columns.Add(colvarIdLop);
				
				TableSchema.TableColumn colvarIdPhongHoc = new TableSchema.TableColumn(schema);
				colvarIdPhongHoc.ColumnName = "IdPhongHoc";
				colvarIdPhongHoc.DataType = DbType.Guid;
				colvarIdPhongHoc.MaxLength = 0;
				colvarIdPhongHoc.AutoIncrement = false;
				colvarIdPhongHoc.IsNullable = false;
				colvarIdPhongHoc.IsPrimaryKey = false;
				colvarIdPhongHoc.IsForeignKey = true;
				colvarIdPhongHoc.IsReadOnly = false;
				colvarIdPhongHoc.DefaultSetting = @"";
				
					colvarIdPhongHoc.ForeignKeyTableName = "PhongHoc";
				schema.Columns.Add(colvarIdPhongHoc);
				
				TableSchema.TableColumn colvarIdGiaoVien = new TableSchema.TableColumn(schema);
				colvarIdGiaoVien.ColumnName = "IdGiaoVien";
				colvarIdGiaoVien.DataType = DbType.Guid;
				colvarIdGiaoVien.MaxLength = 0;
				colvarIdGiaoVien.AutoIncrement = false;
				colvarIdGiaoVien.IsNullable = false;
				colvarIdGiaoVien.IsPrimaryKey = false;
				colvarIdGiaoVien.IsForeignKey = true;
				colvarIdGiaoVien.IsReadOnly = false;
				colvarIdGiaoVien.DefaultSetting = @"";
				
					colvarIdGiaoVien.ForeignKeyTableName = "GiaoVien";
				schema.Columns.Add(colvarIdGiaoVien);
				
				TableSchema.TableColumn colvarBuoiHoc = new TableSchema.TableColumn(schema);
				colvarBuoiHoc.ColumnName = "BuoiHoc";
				colvarBuoiHoc.DataType = DbType.String;
				colvarBuoiHoc.MaxLength = 20;
				colvarBuoiHoc.AutoIncrement = false;
				colvarBuoiHoc.IsNullable = true;
				colvarBuoiHoc.IsPrimaryKey = false;
				colvarBuoiHoc.IsForeignKey = false;
				colvarBuoiHoc.IsReadOnly = false;
				colvarBuoiHoc.DefaultSetting = @"";
				colvarBuoiHoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBuoiHoc);
				
				TableSchema.TableColumn colvarThoiGianBatDau = new TableSchema.TableColumn(schema);
				colvarThoiGianBatDau.ColumnName = "ThoiGianBatDau";
				colvarThoiGianBatDau.DataType = DbType.DateTime;
				colvarThoiGianBatDau.MaxLength = 0;
				colvarThoiGianBatDau.AutoIncrement = false;
				colvarThoiGianBatDau.IsNullable = false;
				colvarThoiGianBatDau.IsPrimaryKey = false;
				colvarThoiGianBatDau.IsForeignKey = false;
				colvarThoiGianBatDau.IsReadOnly = false;
				colvarThoiGianBatDau.DefaultSetting = @"";
				colvarThoiGianBatDau.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThoiGianBatDau);
				
				TableSchema.TableColumn colvarThoiGianKetThuc = new TableSchema.TableColumn(schema);
				colvarThoiGianKetThuc.ColumnName = "ThoiGianKetThuc";
				colvarThoiGianKetThuc.DataType = DbType.DateTime;
				colvarThoiGianKetThuc.MaxLength = 0;
				colvarThoiGianKetThuc.AutoIncrement = false;
				colvarThoiGianKetThuc.IsNullable = false;
				colvarThoiGianKetThuc.IsPrimaryKey = false;
				colvarThoiGianKetThuc.IsForeignKey = false;
				colvarThoiGianKetThuc.IsReadOnly = false;
				colvarThoiGianKetThuc.DefaultSetting = @"";
				colvarThoiGianKetThuc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThoiGianKetThuc);
				
				TableSchema.TableColumn colvarSoGio = new TableSchema.TableColumn(schema);
				colvarSoGio.ColumnName = "SoGio";
				colvarSoGio.DataType = DbType.Int32;
				colvarSoGio.MaxLength = 0;
				colvarSoGio.AutoIncrement = false;
				colvarSoGio.IsNullable = true;
				colvarSoGio.IsPrimaryKey = false;
				colvarSoGio.IsForeignKey = false;
				colvarSoGio.IsReadOnly = false;
				colvarSoGio.DefaultSetting = @"";
				colvarSoGio.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoGio);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["QLSUN"].AddSchema("LichGiangDay",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdLichGiangDay")]
		[Bindable(true)]
		public Guid IdLichGiangDay 
		{
			get { return GetColumnValue<Guid>(Columns.IdLichGiangDay); }
			set { SetColumnValue(Columns.IdLichGiangDay, value); }
		}
		  
		[XmlAttribute("IdLop")]
		[Bindable(true)]
		public Guid IdLop 
		{
			get { return GetColumnValue<Guid>(Columns.IdLop); }
			set { SetColumnValue(Columns.IdLop, value); }
		}
		  
		[XmlAttribute("IdPhongHoc")]
		[Bindable(true)]
		public Guid IdPhongHoc 
		{
			get { return GetColumnValue<Guid>(Columns.IdPhongHoc); }
			set { SetColumnValue(Columns.IdPhongHoc, value); }
		}
		  
		[XmlAttribute("IdGiaoVien")]
		[Bindable(true)]
		public Guid IdGiaoVien 
		{
			get { return GetColumnValue<Guid>(Columns.IdGiaoVien); }
			set { SetColumnValue(Columns.IdGiaoVien, value); }
		}
		  
		[XmlAttribute("BuoiHoc")]
		[Bindable(true)]
		public string BuoiHoc 
		{
			get { return GetColumnValue<string>(Columns.BuoiHoc); }
			set { SetColumnValue(Columns.BuoiHoc, value); }
		}
		  
		[XmlAttribute("ThoiGianBatDau")]
		[Bindable(true)]
		public DateTime ThoiGianBatDau 
		{
			get { return GetColumnValue<DateTime>(Columns.ThoiGianBatDau); }
			set { SetColumnValue(Columns.ThoiGianBatDau, value); }
		}
		  
		[XmlAttribute("ThoiGianKetThuc")]
		[Bindable(true)]
		public DateTime ThoiGianKetThuc 
		{
			get { return GetColumnValue<DateTime>(Columns.ThoiGianKetThuc); }
			set { SetColumnValue(Columns.ThoiGianKetThuc, value); }
		}
		  
		[XmlAttribute("SoGio")]
		[Bindable(true)]
		public int? SoGio 
		{
			get { return GetColumnValue<int?>(Columns.SoGio); }
			set { SetColumnValue(Columns.SoGio, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public Public.DiemDanhCollection DiemDanhRecords()
		{
			return new Public.DiemDanhCollection().Where(DiemDanh.Columns.IdLichGiangDay, IdLichGiangDay).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a GiaoVien ActiveRecord object related to this LichGiangDay
		/// 
		/// </summary>
		public Public.GiaoVien GiaoVien
		{
			get { return Public.GiaoVien.FetchByID(this.IdGiaoVien); }
			set { SetColumnValue("IdGiaoVien", value.IdGiaoVien); }
		}
		
		
		/// <summary>
		/// Returns a Lop ActiveRecord object related to this LichGiangDay
		/// 
		/// </summary>
		public Public.Lop Lop
		{
			get { return Public.Lop.FetchByID(this.IdLop); }
			set { SetColumnValue("IdLop", value.IdLop); }
		}
		
		
		/// <summary>
		/// Returns a PhongHoc ActiveRecord object related to this LichGiangDay
		/// 
		/// </summary>
		public Public.PhongHoc PhongHoc
		{
			get { return Public.PhongHoc.FetchByID(this.IdPhongHoc); }
			set { SetColumnValue("IdPhongHoc", value.IdPhongHoc); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid varIdLichGiangDay,Guid varIdLop,Guid varIdPhongHoc,Guid varIdGiaoVien,string varBuoiHoc,DateTime varThoiGianBatDau,DateTime varThoiGianKetThuc,int? varSoGio)
		{
			LichGiangDay item = new LichGiangDay();
			
			item.IdLichGiangDay = varIdLichGiangDay;
			
			item.IdLop = varIdLop;
			
			item.IdPhongHoc = varIdPhongHoc;
			
			item.IdGiaoVien = varIdGiaoVien;
			
			item.BuoiHoc = varBuoiHoc;
			
			item.ThoiGianBatDau = varThoiGianBatDau;
			
			item.ThoiGianKetThuc = varThoiGianKetThuc;
			
			item.SoGio = varSoGio;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(Guid varIdLichGiangDay,Guid varIdLop,Guid varIdPhongHoc,Guid varIdGiaoVien,string varBuoiHoc,DateTime varThoiGianBatDau,DateTime varThoiGianKetThuc,int? varSoGio)
		{
			LichGiangDay item = new LichGiangDay();
			
				item.IdLichGiangDay = varIdLichGiangDay;
			
				item.IdLop = varIdLop;
			
				item.IdPhongHoc = varIdPhongHoc;
			
				item.IdGiaoVien = varIdGiaoVien;
			
				item.BuoiHoc = varBuoiHoc;
			
				item.ThoiGianBatDau = varThoiGianBatDau;
			
				item.ThoiGianKetThuc = varThoiGianKetThuc;
			
				item.SoGio = varSoGio;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdLichGiangDayColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdLopColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhongHocColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IdGiaoVienColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn BuoiHocColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ThoiGianBatDauColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ThoiGianKetThucColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SoGioColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdLichGiangDay = @"IdLichGiangDay";
			 public static string IdLop = @"IdLop";
			 public static string IdPhongHoc = @"IdPhongHoc";
			 public static string IdGiaoVien = @"IdGiaoVien";
			 public static string BuoiHoc = @"BuoiHoc";
			 public static string ThoiGianBatDau = @"ThoiGianBatDau";
			 public static string ThoiGianKetThuc = @"ThoiGianKetThuc";
			 public static string SoGio = @"SoGio";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
